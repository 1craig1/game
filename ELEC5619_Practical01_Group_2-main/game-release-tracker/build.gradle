plugins {
    id 'java'
    id 'org.springframework.boot' version '4.0.0-M1'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'com'
version = '0.0.1-SNAPSHOT'
description = 'game-release-tracker'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-restclient'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'jakarta.validation:jakarta.validation-api:3.1.1'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// Configure the JaCoCo test report
jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.required = true // We want the HTML report
    }

    // Tell JaCoCo which compiled classes to analyze
    classDirectories.from = files(sourceSets.main.output.classesDirs)
    // Tell JaCoCo where to find the source code for the report
    sourceDirectories.from = files(sourceSets.main.allSource.srcDirs)
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}
